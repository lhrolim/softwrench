using softwrench.sw4.Shared2.Metadata;
using softwrench.sw4.Shared2.Metadata.Applications.Schema;
using softwrench.sw4.Shared2.Metadata.Applications.UI;
using softwrench.sW4.Shared2.Metadata.Applications.UI;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using cts.commons.portable.Util;
using Newtonsoft.Json;

namespace softwrench.sW4.Shared2.Metadata.Applications.Schema {

    public class ApplicationFieldDefinition : BaseApplicationFieldDefinition, IPCLCloneable {

        public const string AttributeQualifierSeparator = ".";

        private FieldFilter _filter;

        private readonly ISet<ApplicationEvent> _eventsSet = new HashSet<ApplicationEvent>();
        public string EvalExpression {
            get; set;
        }
        [DefaultValue("true")]
        public string EnableDefault {
            get; set;
        }

        /// <summary>
        /// whether this field has been auto generated by the fwk rather than declared on the medatada (such as some pks and fks)
        /// </summary>
        public bool AutoGenerated {
            get; set;
        }

        public ApplicationFieldDefinition() {

        }

        public ApplicationFieldDefinition(string applicationName, string attributeName, string datatype, String label, string requiredExpression, Boolean isReadOnly, bool isHidden, FieldRenderer renderer
            , IWidgetDefinition widget, string defaultValue, string helpIcon, string tooltip, bool fromSubquery)
            : this(applicationName, attributeName, datatype, label, requiredExpression, isReadOnly, isHidden, renderer, null, widget, defaultValue, null, null, helpIcon, tooltip, null, null, null, null, null, null, fromSubquery, null) {
        }

        public ApplicationFieldDefinition(string applicationName, string attributeName, String label) {
            ApplicationName = applicationName;
            Attribute = attributeName;
            Label = label;
            RendererType = "default";
            RendererParameters = new Dictionary<string, object>();
        }

        public ApplicationFieldDefinition(string applicationName, string attribute, string datatype, string label, string requiredExpression, bool isReadOnly, bool isIsHidden,
             FieldRenderer renderer, FieldFilter filter, IWidgetDefinition widgetDefinition, string defaultValue, string qualifier, string showExpression, string helpIcon, string toolTip,
             string attributeToServer, ISet<ApplicationEvent> events, string enableExpression, string evalExpression, string enableDefault, string defaultExpression, bool declaredAsQueryOnEntity, string searchOperation)
            : base(applicationName, label, attribute, requiredExpression, isReadOnly, defaultValue, qualifier, showExpression, helpIcon, toolTip, attributeToServer, events, enableExpression, defaultExpression, declaredAsQueryOnEntity, searchOperation) {
            Renderer = renderer;
            RendererType = Renderer == null ? "default" : Renderer.RendererType;
            RendererParameters = Renderer == null ? new Dictionary<string, object>() : Renderer.ParametersAsDictionary();
            _filter = filter;
            DataType = datatype;
            IsHidden = isIsHidden;
            _eventsSet = events;
            EvalExpression = evalExpression;
            EnableDefault = enableDefault;
            DefaultExpression = defaultExpression;
        }
        //TODO: choose one of the modes?


        public override bool IsHidden {
            get; set;
        }

        public string DataType {
            get; set;
        }

        public string PrimaryAttribute {
            get; set;
        }

        public FieldRenderer Renderer { get; set; }

        public FieldFilter Filter {
            get {
                return _filter;
            }
            set {
                _filter = value;
            }
        }


        public bool IsAssociated => Attribute.Contains(AttributeQualifierSeparator);

        public override string RendererType { get; set; }

        public IDictionary<string, object> RendererParameters { get; set; }

        public IDictionary<string, object> FilterParameters => _filter == null ? new Dictionary<string, object>() : _filter.ParametersAsDictionary();

        [JsonIgnore]
        public bool IsTextField => DataType != null && DataType.EqualsAny("varchar", "string", "text");

        protected bool Equals(ApplicationFieldDefinition other) {
            return string.Equals(Attribute, other.Attribute);
        }

        public override bool Equals(object obj) {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((ApplicationFieldDefinition)obj);
        }

        public override int GetHashCode() {
            return (Attribute != null ? Attribute.GetHashCode() : 0);
        }

        public override string ToString() {
            return Tuple.Create("attr:", Attribute, "label", Label).ToString();
        }

        public object Clone() {
            var clone = new ApplicationFieldDefinition(ApplicationName, Attribute, DataType, Label, RequiredExpression, IsReadOnly, IsHidden,
                Renderer, Filter, null, DefaultValue, Qualifier, ShowExpression, HelpIcon, ToolTip, AttributeToServer, _eventsSet, EnableExpression, EvalExpression, EnableDefault, DefaultExpression, DeclaredAsQueryOnEntity, SearchOperation);
            clone.PrimaryAttribute = PrimaryAttribute;
            return clone;
        }

        public static ApplicationFieldDefinition HiddenInstance(string applicationName, string attributeName) {
            return new ApplicationFieldDefinition(applicationName, attributeName, null, "", "false", false, true,
                        new FieldRenderer(), new FieldFilter(), new HiddenWidgetDefinition(), null, null, null, null, null, null, null, null, null, null, null, false, null);
        }

        public static ApplicationFieldDefinition DefaultColumnInstance(string applicationName, string attributeName, string label) {
            return new ApplicationFieldDefinition(applicationName, attributeName, null, label, "false", false, false,
                        new FieldRenderer(), new FieldFilter(), new HiddenWidgetDefinition(), null, null, null, null, null, null, null, null, null, null, null, false, null);
        }

        public bool IsTransient() {
            return Attribute.StartsWith("#");
        }
    }
}