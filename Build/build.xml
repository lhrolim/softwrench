<project name="Softwrench" default="build" basedir="." xmlns="http://nant.sf.net/release/0.92/nant.xsd" >

  <description>Softwrench</description>
  <property name="debug" value="true" overwrite="false" />

  <property name="IsWindows" value="${platform::is-windows()}"/>
  <property name="MSBuildPath" value="c:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSBuild.exe" />
  <property name="MSDeployPath" value="C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe" />
  <!--   <property name="MSTestPath" value="c:\Windows\Microsoft.NET\Framework64\v4.0.30319\MSTest.exe" />-->
  <property name="SolutionFile" value="../softWrench.sW4.sln" />
  <property name="TestSettingsPath" value="../TestSettings1.testsettings" />
  <property name="TestPath" value="../softwrench.sW4.test/bin/Debug/softwrench.sW4.test.dll" />
  <if test="${environment::variable-exists('outputdir')}">
    <property name="OutputDir" value="${environment::get-variable('outputdir')}" />
  </if>

  <ifnot test="${environment::variable-exists('outputdir')}">
    <property name="OutputDir" value="c:\" />
  </ifnot>

  <tstamp property="build.date" pattern="yyyy_MM_dd_hh_mm_ss" verbose="true" />

  <property name="deploypath" value="${OutputDir}/deploy/${build.date}"/>
  <property name="client" value="otb"/>


  <if test="${property::exists('ignoretstamp')==true}">
    <!--makes development easier-->
    <property name="deploypath" value="${OutputDir}/deploy/local"></property>
    <delete dir="${OutputDir}/deploy/local" failonerror="false"/>
  </if>

  <!--These will come from jenkins-->
  <if test="${environment::variable-exists('clientsw4')}">
    <property name="client" value="${environment::get-variable('clientsw4')}" />
    <property name="deployclientsw4" value="${client}" />
  </if>
  <if test="${environment::variable-exists('multiclientsw4')}">
    <property name="multiclient" value="${environment::get-variable('multiclientsw4')}" />
    <foreach item="String" in="${multiclient}" delim="," property="singleclient">
      <echo message="Client ${singleclient} received from jenkins parameter." />
    </foreach>
  </if>


  <if test="${environment::variable-exists('deployclientsw4')}">
    <property name="deployclientsw4" value="${environment::get-variable('deployclientsw4')}" />
  </if>

  <if test="${environment::variable-exists('environmentsw4')}">
    <property name="profile" value="${environment::get-variable('environmentsw4')}" />
  </if>

  <if test="${environment::variable-exists('image')}">
    <property name="profile" value="${environment::get-variable('image')}" />
  </if>

  <if test="${environment::variable-exists('tag')}">
    <property name="version" value="${environment::get-variable('tag')}" />
  </if>

  <if test="${environment::variable-exists('version')}">
    <property name="version" value="${environment::get-variable('version')}" />
  </if>

  <if test="${environment::variable-exists('offlineversion')}">
    <property name="offlineversion" value="${environment::get-variable('offlineversion')}" />
  </if>

  <if test="${environment::variable-exists('GIT_COMMIT')}">
    <property name="git_commit" value="${environment::get-variable('GIT_COMMIT')}" />
  </if>

  <if test="${property::exists('platform')==false}">
    <property name="platform" value="web" />
  </if>

  <if test="${platform == 'web'}">
    <property name="platformtoexclude" value="mobile" />
  </if>

  <if test="${platform == 'mobile'}">
    <property name="platformtoexclude" value="web" />
  </if>
  
  <!-- the property logtime if true turns on the log of targets time duration -->
  <if test="${IsWindows and environment::variable-exists('logtime')}">
    <property name="logtime" value="${environment::get-variable('logtime')}" />
  </if>

  <target name="fulldeploy" depends="compile,changelog,copydlls,copylinkedfolders,webcompile,deploy"/>

  <target name="fullmultideploy">
    <if test="${IsWindows}"><logtimestart/></if>
    <echo message="Multiple Full Deploy Task" />

    <property name="basedeploy" value="${deploypath}"></property>
    <echo message="Root path of deploy to all clients: ${basedeploy}" />

    <echo message="Common compile task." />
    <call target="compile" />
    <echo message="Common changelog task." />
    <call target="changelog" />

    <property name="failure" value="false"/>
    <property name="failureclients" value=""/>

    <foreach item="String" in="${multiclient}" delim="," property="client">
      <echo message="Full deploy of client ${client}" />
      <property name="deployclientsw4" value="${client}" />
      <property name="deploypath" value="${basedeploy}/${client}"/>

      <trycatch>
        <try>
          <call target="copydlls" />
          <call target="copylinkedfolders" />
          <call target="webcompile" />
          <call target="deploy" />
        </try>
        <catch property="failuremsg">
          <property name="failure" value="true"/>

          <if test="${failureclients != ''}">
            <property name="failureclients" value="${failureclients}, ${client}"/>
          </if>
          <if test="${failureclients == ''}">
            <property name="failureclients" value="${client}"/>
          </if>

          <echo message="Failure in client ${client}!!!!!!!!!!!!!!!!!!!!!!"/>
          <echo message="${environment::newline()}"/>
          <echo message="${failuremsg}"/>
        </catch>
      </trycatch>
      <echo message="${environment::newline()}"/>
      <echo message="${environment::newline()}"/>
      <echo message="${environment::newline()}"/>
      <echo message="${environment::newline()}"/>
      <echo message="${environment::newline()}"/>
    </foreach>

    <if test="${failure == 'true'}">
      <fail message="Failure in clients: ${failureclients}!!!!!!!!!!!!!!!!!!!!!!" />
    </if>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="generatedeploynocompile" depends="copydlls,copylinkedfolders,webcompile"/>

  <target name="fullbuildlocal" depends="compile,zip"/>

  <target name="compile">
    <logtimestart/>
    <exec program="${MSBuildPath}">
      <arg line='"${SolutionFile}"' />
      <arg line="/property:Configuration=Debug" />
      <arg value="/maxcpucount:2" />
      <arg value="/target:Rebuild" />
      <arg value="/verbosity:minimal" />
      <arg value="/nologo" />
    </exec>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="webcompile" description="Runs fron-end tools (package management, transpilers, etc)">
    <if test="${IsWindows}"><logtimestart/></if>
    <!-- install npm dependencies -->
    <echo message="installing npm dependencies"></echo>
    <exec program="cmd" workingdir="." failonerror="true">
      <arg value="/c"></arg>
      <arg value="npm install"></arg>
    </exec>
    <!-- grunt toolchain -->
    <echo message="running grunt"></echo>

    <property name="skiptest" value="true" />
    <if test="${string::contains(profile, 'dev')}">
      <property name="skiptest" value="false" />
    </if>

    <echo message="grunt --path=&quot;${deploypath}&quot; --skiptest=&quot;${skiptest}&quot;"></echo>
    <exec program="cmd" workingdir="." failonerror="true">
      <arg value="/c"></arg>
      <arg value='grunt --path="${deploypath}" --skiptest="${skiptest}"'></arg>
    </exec>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <!-- TODO: extract similar tasks. Copying just for the sake of trial-and-error testing -->
  <target name="webtest" description="Runs karma tests" depends="generatelinks">
    <if test="${IsWindows}"><logtimestart/></if>
    <!-- install npm dependencies -->
    <echo message="installing npm dependencies"></echo>
    <exec program="cmd" workingdir="." failonerror="true">
      <arg value="/c"></arg>
      <arg value="npm install"></arg>
    </exec>
    <!-- grunt toolchain -->
    <echo message="running grunt"></echo>
    <exec program="cmd" workingdir="." failonerror="true">
      <arg value="/c"></arg>
      <arg value='grunt test'></arg>
    </exec>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>


  <target name="rmnodemodules" description="Removes 'softWrench.sW4.Web/node_modules' directory if it exists">
    <if test="${IsWindows}"><logtimestart/></if>
    <echo message="deleting 'softWrench.sW4.Web/node_modules' directory"></echo>
    <!-- Nant's <delete> task solution-->
    <!-- <delete dir="../softWrench.sW4.Web/node_modules" 
      includeemptydirs="true" verbose="true" failonerror="true" 
      if="${directory::exists('../softWrench.sW4.Web/node_modules')}">
    </delete> -->

    <!-- cmd + rmdir solution -->
    <!-- <exec if="${directory::exists('../softWrench.sW4.Web/node_modules')}" 
      program="cmd" workingdir="../softWrench.sW4.Web" failonerror="true">
      <arg value="/c"></arg>
      <arg value="rmdir /S /Q node_modules"></arg>
    </exec> -->

    <!-- robocopy solution (the one that works): 
      mkdir empty_dir
      robocopy empty_dir the_dir_to_delete /s /mir
      rmdir empty_dir
      rmdir the_dir_to_delete
    -->
    <if test="${directory::exists('../softWrench.sW4.Web/node_modules')}">

      <mkdir dir="../softWrench.sW4.Web/temp_empty"
        unless="${directory::exists('../softWrench.sW4.Web/temp_empty')}" />

      <echo message="using robocopy trick to delete longpaths"></echo>
      <exec program="robocopy" workingdir="../softWrench.sW4.Web" failonerror="false">
        <arg line="temp_empty node_modules /s /mir /purge /njh /njs /ndl /nc /ns /nfl"></arg>
      </exec>

      <echo message="deleting temp_empty folder"></echo>
      <exec program="cmd" workingdir="../softWrench.sW4.Web">
        <arg value="/c"></arg>
        <arg value="rmdir temp_empty /S /Q"></arg>
      </exec>

      <echo message="deleting node_modules folder"></echo>
      <exec program="cmd" workingdir="../softWrench.sW4.Web">
        <arg value="/c"></arg>
        <arg value="rmdir node_modules /S /Q"></arg>
      </exec>
    </if>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="test">
    <if test="${IsWindows}"><logtimestart/></if>
    <delete dir="${OutputDir}/testresults" failonerror="false"/>
    <delete file="TestResults.trx"/>

    <if propertyexists="MsTestPath">
      <echo message="MSTestPath found at ${MsTestPath}"></echo>
      <exec program="${MsTestPath}">
        <arg line="/testcontainer:${TestPath}" />
        <arg line="/testsettings:${TestSettingsPath}" />
        <arg line="/resultsfile:TestResults.trx" />
      </exec>
    </if>
    <ifnot propertyexists="MsTestPath">
      <echo message="MSTestPath not found at"></echo>
      <exec program="MsTest.exe">
        <arg line="/testcontainer:${TestPath}" />
        <arg line="/testsettings:${TestSettingsPath}" />
        <arg line="/resultsfile:TestResults.trx" />
      </exec>
    </ifnot>

    <!-- http://karma-runner.github.io/0.12/config/configuration-file.html -->
    <!--<exec program="karma.cmd" workingdir="../softwrench.sw4.jstest">
      <arg line="start" />
      <arg value="- -browsers=PhantomJS"/>
      <arg value="- -single-run"/>
    </exec>-->
    <call target="webtest"/>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="mkdir">
    <if test="${IsWindows}"><logtimestart/></if>
    <!--    <delete includeemptydirs="true">-->
    <!--      <fileset basedir="${OutputDir}/deploy">-->
    <!--        <include name="**\*" />-->
    <!--      </fileset>-->
    <!--    </delete>-->

    <mkdir dir="${deploypath}"/>
    <mkdir dir="${deploypath}/bin"/>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="copydlls" depends="mkdir">
    <if test="${IsWindows}"><logtimestart/></if>
    <copy todir="${deploypath}" includeemptydirs="false">
      <fileset basedir="../softWrench.sW4.Web/">
        <include name="**/*" />
        <exclude name="**/*.cs"/>
        <exclude name="*.dll"/>
        <exclude name="*.suo"/>
        <exclude name="*.csproj"/>
        <exclude name="App_Data/client/**"/>
        <exclude name="**.csproj.*"/>
        <exclude name=".nuget/**"/>
        <exclude name="Dependencies/**"/>
        <exclude name="bin/Dependencies/**"/>
        <exclude name="bower_components/**"/>
        <exclude name="obj/**"/>
      </fileset>
    </copy>
    <copy todir="${deploypath}/bin">
      <fileset basedir="../softWrench.sW4.Web/Dependencies">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${deploypath}/App_Data/Client/@internal">
      <fileset basedir="../softWrench.sW4.Web/App_Data/Client/@internal">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${deploypath}/App_Data/Client/otb">
      <fileset basedir="../softWrench.sW4.Web/App_Data/Client/otb">
        <include name="*.*" />
      </fileset>
    </copy>

    <copy todir="${deploypath}/App_Data/Client/${client}" failonerror="false">
      <fileset basedir="../softWrench.sW4.Web/App_Data/Client/${client}">
        <include name="*.*" />
      </fileset>
    </copy>




    <attrib readonly="false">
      <fileset basedir="${deploypath}">
        <include name="**"/>
      </fileset>
    </attrib>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="copylinkedfolders" depends="mkdir">
    <if test="${IsWindows}"><logtimestart/></if>
    <echo message="Excluding ${platformtoexclude} files" />


    <foreach item="Folder" in="../" property="foldername">
      <property name="customerplaceholder" value="${foldername}/customer.placeholder" />
      <property name="sharedplaceholder" value="${foldername}/shared.placeholder" />
      <property name="sharedcommonsplaceholder" value="${foldername}/shared_commons.placeholder" />
      <property name="onlinefolder" value="${foldername}/online_content" />

      <property name="indexof" value="${string::last-index-of(foldername, '.') + 1}" />
      <property name="length" value="${string::get-length(foldername)}" />
      <property name="size" value="${string::get-length(foldername) - string::last-index-of(foldername, '.')-1}" />


      <property name="projectname" value="${string::substring(foldername,indexof,size)}" />




      <if test="${(file::exists(customerplaceholder) and string::contains(profile, 'dev')) or (projectname == client)}">

        <copy todir="${deploypath}/Content/Customers/${projectname}">
          <fileset basedir="../softWrench.sW4.${projectname}/web_content/${projectname}">
            <include name="**/*" />
            <exclude name="**/*.${platformtoexclude}.*"/>
          </fileset>
        </copy>

        <if test="${directory::exists(onlinefolder)}">
          <copy todir="${deploypath}/Content/Customers/${projectname}">
            <fileset basedir="../softWrench.sW4.${projectname}/online_content/${projectname}">
              <include name="**/*" />
              <exclude name="**/*.${platformtoexclude}.*"/>
            </fileset>
          </copy>
        </if>

        <copy todir="${deploypath}/App_Data/Client/${projectname}/">
          <fileset basedir="../softwrench.sW4.${projectname}/metadata/${projectname}/">
            <include name="*.*" />
          </fileset>
        </copy>

        <copy todir="${deploypath}/bin/">
          <fileset basedir="../softWrench.sW4.${projectname}/Dependencies">
            <include name="**/*" />
          </fileset>
        </copy>

        <echo message="Copied files for ${projectname}" />
      </if>


      <if test="${file::exists(sharedplaceholder) or file::exists(sharedcommonsplaceholder)}">
        <copy todir="${deploypath}/Content/Shared/${projectname}">
          <fileset basedir="../softWrench.sW4.${projectname}/web_content/${projectname}">
            <include name="**/*" />
            <exclude name="**/*.${platformtoexclude}.*"/>
          </fileset>
        </copy>
        <echo message="Copied files for ${projectname}" />
      </if>
    </foreach>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>


  <target name="releaseprepare" >
    <if test="${IsWindows}"><logtimestart/></if>
    <xmlpoke file="../softWrench.sW4.Web/Web.config"
               xpath="/configuration/appSettings/add[@key = 'version']/@value"
               value="${version}" failonerror="true"/>


    <xmlpoke file="../softWrench.sW4.WebMobile/config.xml"
              xpath="//x:widget/@version"
              value="${offlineversion}" failonerror="true">
      <namespaces>
        <namespace prefix="x" uri="http://www.w3.org/ns/widgets" />
      </namespaces>
    </xmlpoke>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>


  <target name="readofflineversion">
    <if test="${IsWindows}"><logtimestart/></if>
    <xmlpeek property="currentofflineversion" file="../softWrench.sW4.WebMobile/config.xml"
           xpath="//x:widget/@version">
      <namespaces>
        <namespace prefix="x" uri="http://www.w3.org/ns/widgets" />
      </namespaces>
    </xmlpeek>

    <setenv name="OFF_VERSION" value="${currentofflineversion}" />

    <property name="off_versiontest" value="${environment::get-variable('OFF_VERSION')}" />

    <echo message="${off_versiontest}" file="tmp_offversion.txt"/>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="appendofflinecommit" >
    <if test="${IsWindows}"><logtimestart/></if>
    <xmlpeek property="currentofflineversion" file="../softWrench.sW4.WebMobile/config.xml"
            xpath="//x:widget/@version">
      <namespaces>
        <namespace prefix="x" uri="http://www.w3.org/ns/widgets" />
      </namespaces>
    </xmlpeek>


    <if test="${string::contains(currentofflineversion, 'SNAPSHOT')}">
      <xmlpoke file="../softWrench.sW4.WebMobile/config.xml"
                 xpath="//x:widget/@version"
                 value="${currentofflineversion}#${git_commit}" failonerror="true">
        <namespaces>
          <namespace prefix="x" uri="http://www.w3.org/ns/widgets" />
        </namespaces>
      </xmlpoke>
    </if>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>


  <target name="setclient">
    <if test="${IsWindows}"><logtimestart/></if>
    <xmlpoke file="${deploypath}/Web.config"
               xpath="/configuration/appSettings/add[@key = 'clientkey']/@value"
               value="${client}" failonerror="true"/>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="setenv">
    <if test="${IsWindows}"><logtimestart/></if>
    <xmlpoke file="${deploypath}/Web.config"
               xpath="/configuration/appSettings/add[@key = 'profile']/@value"
               value="${profile}" failonerror="true"/>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="zip" depends="changelog,copydlls,copylinkedfolders,webcompile,setclient,setenv">
    <if test="${IsWindows}"><logtimestart/></if>
    <zip includeemptydirs="true" zipfile="${OutputDir}/deploy/sw4_${platform}_${client}_${profile}_${build.date}.zip">
      <fileset basedir="${deploypath}">
        <include name="**/*" />
      </fileset>
    </zip>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>


  <!--  <target name="explodexmlfiles" depends="setenv,setclient">-->
  <!--    <property name="clientpropertyfile" value="../softwrench.sW4.${client}/metadata/${client}/properties.xml" />-->
  <!--    <if test="${file::exists(clientpropertyfile)}">-->
  <!--      <copy todir="${deploypath}/App_Data/Client/${client}/">-->
  <!--        <fileset basedir="../softwrench.sW4.${client}/metadata/${client}/">-->
  <!--          <include name="*.*" />-->
  <!--        </fileset>-->
  <!--      </copy>-->
  <!--    </if>-->
  <!--  </target>-->

  <target name="deploypeek" depends="setenv,setclient">
    <if test="${IsWindows}"><logtimestart/></if>

    <property name="clientfile1" value="${deploypath}/App_Data/Client/${deployclientsw4}/deploy.xml" />
    <property name="clientfile2" value="../softwrench.sW4.${deployclientsw4}/metadata/${deployclientsw4}/deploy.xml" />

    <echo message="${clientfile1}"/>
    <echo message="${clientfile2}"/>

    <if test="${file::exists(clientfile1)}">

      <xmlpeek property="iispath" file="${clientfile1}"
               xpath="//x:metadata/x:globalproperties/x:environment[@key = '${profile}']/x:property[@key = 'iispath']/@value">
        <namespaces>
          <namespace prefix="x" uri="http://www.controltechnologysolutions.com/deploymetadata" />
        </namespaces>
      </xmlpeek>

      <xmlpeek property="msdeploy_url" file="${clientfile1}"
               xpath="//x:metadata/x:globalproperties/x:environment[@key = '${profile}']/x:property[@key = 'msdeploy_url']/@value">
        <namespaces>
          <namespace prefix="x" uri="http://www.controltechnologysolutions.com/deploymetadata" />
        </namespaces>
      </xmlpeek>

    </if>

    <if test="${file::exists(clientfile2)}">

      <echo message="searching in dll"/>

      <xmlpeek property="iispath" file="${clientfile2}"
               xpath="//x:metadata/x:globalproperties/x:environment[@key = '${profile}']/x:property[@key = 'iispath']/@value">
        <namespaces>
          <namespace prefix="x" uri="http://www.controltechnologysolutions.com/deploymetadata" />
        </namespaces>
      </xmlpeek>

      <xmlpeek property="msdeploy_url" file="${clientfile2}"
               xpath="//x:metadata/x:globalproperties/x:environment[@key = '${profile}']/x:property[@key = 'msdeploy_url']/@value">
        <namespaces>
          <namespace prefix="x" uri="http://www.controltechnologysolutions.com/deploymetadata" />
        </namespaces>
      </xmlpeek>

    </if>

    <echo message="urlPath: + ${msdeploy_url}"/>
    <echo message="iisPath:  + ${iispath}"/>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="deploy" depends="setenv,setclient,deploypeek">
    <if test="${IsWindows}"><logtimestart/></if>
    <exec program="${MSDeployPath}">
      <arg line="-verb:sync" />
      <arg line="-source:iisApp=${deploypath},includeAcls=true" />
      <arg line="-dest:iisApp=${iispath},wmsvc=${msdeploy_url}" />
      <arg line="-allowUntrusted=true" />
      <arg line="-enableRule:AppOffline" />
      <arg line="-verbose" />
    </exec>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <target name="generatelinks">
    <if test="${IsWindows}"><logtimestart/></if>

    <exec program="cmd" workingdir="../softwrench.sW4.Web/Content"
          unless="${directory::exists('../softwrench.sW4.Web/Content/Customers')}">
      <arg value="/c"/>
      <arg value="mkdir Customers"/>
    </exec>

    <foreach item="Folder" in="../" property="foldername">
      <property name="customerplaceholder" value="${foldername}/customer.placeholder" />
      <property name="sharedplaceholder" value="${foldername}/shared.placeholder" />
      <property name="sharedcommonsplaceholder" value="${foldername}/shared_commons.placeholder" />
      <property name="onlinefolder" value="${foldername}/online_content" />

      <property name="indexof" value="${string::last-index-of(foldername, '.') + 1}" />
      <property name="length" value="${string::get-length(foldername)}" />
      <property name="size" value="${string::get-length(foldername) - string::last-index-of(foldername, '.')-1}" />

      <property name="clientname" value="${string::substring(foldername,indexof,size)}" />



      <if test="${file::exists(customerplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>



        <exec program="cmd" workingdir="../softwrench.sW4.Web/Content/Customers" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
          <arg value="/c"/>
          <arg line='mklink /J ${clientname} "${foldername}\web_content\${clientname}"'/>
        </exec>

        <exec program="cmd" workingdir="../softwrench.sW4.Web/APP_Data/Client" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
          <arg value="/c"/>
          <arg line='mklink /J ${clientname} "${foldername}\metadata\${clientname}"'/>
        </exec>

        <if test="${directory::exists(onlinefolder)}">
          <exec program="cmd" workingdir="../softwrench.sW4.Web/Content/Customers" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
            <arg value="/c"/>
            <arg line='mklink /J ${clientname}_online "${foldername}\online_content\${clientname}"'/>
          </exec>
        </if>



        <if test="${customerlinkcreated =='0'}">
          <echo message="created symbolic link for ${clientname}" />
        </if>
      </if>


      <if test="${file::exists(sharedplaceholder) or file::exists(sharedcommonsplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <exec program="cmd" workingdir="../softwrench.sW4.Web/Content/Shared" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
          <arg value="/c"/>
          <arg line='mklink /J ${clientname} "${foldername}\web_content\${clientname}"'/>
        </exec>

        <if test="${directory::exists(onlinefolder)}">
          <exec program="cmd" workingdir="../softwrench.sW4.Web/Content/Shared" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
            <arg value="/c"/>
            <arg line='mklink /J ${clientname}_online "${foldername}\online_content\${clientname}"'/>
          </exec>
        </if>

        <if test="${customerlinkcreated =='0'}">
          <echo message="created symbolic link for ${clientname}" />
        </if>
      </if>
    </foreach>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>
  <!-- #region: copy SWOFF dependencies  -->
  <target name="copyLinksMobile" description="Copies the shared and customer folders instead of just linking them (useful for iOS remote build)">
    <if test="${IsWindows}"><logtimestart/></if>
    <foreach item="Folder" in="../" property="foldername">
      <property name="customerplaceholder" value="${foldername}/customer.placeholder" />
      <property name="customerlinkcreated" value="1" />
      <property name="sharedplaceholder" value="${foldername}/shared.placeholder" />
      <property name="sharedcommonsplaceholder" value="${foldername}/shared_commons.placeholder" />
      <property name="offlinefolder" value="${foldername}/offline_content" />

      <property name="indexof" value="${string::last-index-of(foldername, '.') + 1}" />
      <property name="length" value="${string::get-length(foldername)}" />
      <property name="size" value="${string::get-length(foldername) - string::last-index-of(foldername, '.')-1}" />

      <property name="clientname" value="${string::substring(foldername,indexof,size)}" />

      <if test="${file::exists(customerplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <!--
        <exec program="cmd" workingdir="../softwrench.sw4.WebMobile/www/Content/Customers" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
          <arg value="/c"/>
          <arg line='mklink /D ${clientname} "${foldername}\web_content\${clientname}"'/>
        </exec>-->

        <if test="${directory::exists(offlinefolder)}">
          <echo message="creating symbolic link for ${clientname}" />

          <copy todir="../softwrench.sw4.WebMobile/www/Content/Customers/${clientname}_offline">
          	<fileset basedir="${foldername}/offline_content/${clientname}/">
     					<include name="**/*" />
          	</fileset>
          </copy>	
        </if>

        <if test="${customerlinkcreated =='0'}">
          <echo message="copied contents for ${clientname}" />
        </if>
      </if>


      <if test="${file::exists(sharedplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <if test="${directory::exists(offlinefolder)}">
        	<copy todir="../softwrench.sw4.WebMobile/www/Content/Shared/${clientname}_offline">
        		<fileset basedir="${foldername}/offline_content/${clientname}/">
     					<include name="**/*" />
  					</fileset>
        	</copy>
        </if>

        <if test="${customerlinkcreated =='0'}">
          <echo message="copied contents for ${clientname}" />
        </if>
      </if>

      <if test="${file::exists(sharedcommonsplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <copy todir="../softwrench.sw4.WebMobile/www/Content/Shared/${clientname}">
        	<fileset basedir="${foldername}/web_content/${clientname}/">
        		<include name="**/*" />
        	</fileset>
        </copy>

        <if test="${directory::exists(offlinefolder)}">
          <copy todir="../softwrench.sw4.WebMobile/www/Content/Shared/${clientname}_offline">
          	<fileset basedir="${foldername}/offline_content/${clientname}/">
          		<include name="**/*"/>
          	</fileset>
          </copy>
        </if>

        <if test="${customerlinkcreated =='0'}">
          <echo message="copied contents for ${clientname}" />
        </if>
      </if>

    </foreach>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>
  <!-- #endregion -->

  <target name="generatelinksMobile">
    <if test="${IsWindows}"><logtimestart/></if>
    <foreach item="Folder" in="../" property="foldername">
      <property name="customerplaceholder" value="${foldername}/customer.placeholder" />
      <property name="customerlinkcreated" value="1" />
      <property name="sharedplaceholder" value="${foldername}/shared.placeholder" />
      <property name="sharedcommonsplaceholder" value="${foldername}/shared_commons.placeholder" />
      <property name="offlinefolder" value="${foldername}/offline_content" />

      <property name="indexof" value="${string::last-index-of(foldername, '.') + 1}" />
      <property name="length" value="${string::get-length(foldername)}" />
      <property name="size" value="${string::get-length(foldername) - string::last-index-of(foldername, '.')-1}" />

      <property name="clientname" value="${string::substring(foldername,indexof,size)}" />



      <if test="${file::exists(customerplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <!--
        <exec program="cmd" workingdir="../softwrench.sw4.WebMobile/www/Content/Customers" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
          <arg value="/c"/>
          <arg line='mklink /D ${clientname} "${foldername}\web_content\${clientname}"'/>
        </exec>-->

        <if test="${directory::exists(offlinefolder)}">
          <echo message="creating symbolic link for ${clientname}" />
          <exec program="cmd" workingdir="../softwrench.sw4.WebMobile/www/Content/Customers" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
            <arg value="/c"/>
            <arg line='mklink /J ${clientname}_offline "${foldername}\offline_content\${clientname}"'/>
          </exec>
        </if>


        <if test="${customerlinkcreated =='0'}">
          <echo message="created symbolic link for ${clientname}" />
        </if>
      </if>


      <if test="${file::exists(sharedplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <if test="${directory::exists(offlinefolder)}">
          <exec program="cmd" workingdir="../softwrench.sw4.WebMobile/www/Content/Shared" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
            <arg value="/c"/>
            <arg line='mklink /J ${clientname}_offline "${foldername}\offline_content\${clientname}"'/>
          </exec>
        </if>

        <if test="${customerlinkcreated =='0'}">
          <echo message="created symbolic link for ${clientname}" />
        </if>
      </if>

      <if test="${file::exists(sharedcommonsplaceholder)}">
        <echo message="${foldername}" />
        <echo message="${clientname}"/>

        <exec program="cmd" workingdir="../softwrench.sw4.WebMobile/www/Content/Shared" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
          <arg value="/c"/>
          <arg line='mklink /J ${clientname} "${foldername}\web_content\${clientname}"'/>
        </exec>

        <if test="${directory::exists(offlinefolder)}">
          <exec program="cmd" workingdir="../softwrench.sw4.WebMobile/www/Content/Shared" verbose="true" failonerror="false" resultproperty="customerlinkcreated">
            <arg value="/c"/>
            <arg line='mklink /J ${clientname}_offline "${foldername}\offline_content\${clientname}"'/>
          </exec>
        </if>

        <if test="${customerlinkcreated =='0'}">
          <echo message="created symbolic link for ${clientname}" />
        </if>
      </if>

    </foreach>
    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <!-- - Builds the changelog and instalation tasks files (only if dochangelog env variavel is true); -->
  <!-- - Copy them to deploy folder; -->
  <!-- - Sends one email with release notes (only if changelogrntolist env variable is set); -->
  <!-- - Sends one email with instalation tasks (only if changelogittolist env variable is set). -->
  <target name="changelog" depends="mkdir">
    <if test="${IsWindows}"><logtimestart/></if>

    <property name="DoChangelog" value="false" />
    <if test="${environment::variable-exists('dochangelog')}">
      <property name="DoChangelog" value="${environment::get-variable('dochangelog')}" />
    </if>

    <property name="ChangelogTagRegex" value="^v.*$" />
    <if test="${environment::variable-exists('changelogtagregex')}">
      <property name="ChangelogTagRegex" value="${environment::get-variable('changelogtagregex')}" />
    </if>

    <property name="ChangelogInitVersion" value="" />
    <if test="${environment::variable-exists('changeloginitversion')}">
      <property name="ChangelogInitVersion" value="${environment::get-variable('changeloginitversion')}" />
    </if>

    <property name="ChangelogEndVersion" value="" />
    <if test="${environment::variable-exists('changelogendversion')}">
      <property name="ChangelogEndVersion" value="${environment::get-variable('changelogendversion')}" />
    </if>

    <property name="ChangelogIncludeInit" value="" />
    <if test="${environment::variable-exists('changelogincludeinit')}">
      <property name="ChangelogIncludeInit" value="${environment::get-variable('changelogincludeinit')}" />
    </if>

    <property name="ChangelogIncludeEnd" value="" />
    <if test="${environment::variable-exists('changelogincludeend')}">
      <property name="ChangelogIncludeEnd" value="${environment::get-variable('changelogincludeend')}" />
    </if>

    <changelog dochangelog="${DoChangelog}" pattern="${ChangelogTagRegex}" initversion="${ChangelogInitVersion}" endversion="${ChangelogEndVersion}" includeinit="${ChangelogIncludeInit}" includeend="${ChangelogIncludeEnd}"/>
    <copy todir="${deploypath}">
      <fileset basedir=".">
        <include name="changelog.html" />
        <include name="instalationTasks.html" />
      </fileset>
    </copy>

    <!-- Release Notes Email -->
    <if test="${environment::variable-exists('changelogrntolist')}">
      <property name="ChangelogRNToList" value="${environment::get-variable('changelogrntolist')}" />
    </if>

    <property name="ChangelogRNCCList" value="" />
    <if test="${environment::variable-exists('changelogcclist')}">
      <property name="ChangelogRNCCList" value="${environment::get-variable('changelogcclist')}" />
    </if>

    <if test="${property::exists('ChangelogRNToList')==true}">
      <mail from="ctschangelog@gmail.com" tolist="${ChangelogRNToList}" cclist="${ChangelogRNCCList}" isbodyhtml="true" mailhost="smtp.gmail.com" mailport="587" password="f50HLV9U0Grk9ufqoF45" ssl="true" subject="Release Notes" user="ctschangelog@gmail.com">
        <files>
          <include name="changelog.html" />
        </files>
      </mail>
    </if>
    <if test="${property::exists('ChangelogRNToList')!=true}">
      <echo message="Release notes email not sent due to the absence of enviroment variable 'changelogrntolist'." />
    </if>    

    <!-- Instalation Tasks Email -->
    <if test="${environment::variable-exists('changelogittolist')}">
      <property name="ChangelogITToList" value="${environment::get-variable('changelogittolist')}" />
    </if>

    <property name="ChangelogITCCList" value="" />
    <if test="${environment::variable-exists('changelogitcclist')}">
      <property name="ChangelogITCCList" value="${environment::get-variable('changelogitcclist')}" />
    </if>

    <if test="${property::exists('ChangelogITToList')==true}">
      <mail from="ctschangelog@gmail.com" tolist="${ChangelogITToList}" cclist="${ChangelogITCCList}" isbodyhtml="true" mailhost="smtp.gmail.com" mailport="587" password="f50HLV9U0Grk9ufqoF45" ssl="true" subject="Instalation Tasks" user="ctschangelog@gmail.com">
        <files>
          <include name="${deploypath}/instalationTasks.html" />
        </files>
      </mail>
    </if>
    <if test="${property::exists('ChangelogITToList')!=true}">
      <echo message="Instalation tasks email not sent due to the absence of enviroment variable 'changelogittolist'." />
    </if> 

    <if test="${IsWindows}"><logtimeend/></if>
  </target>

  <script language="C#" if="${IsWindows}">
    <references>
      <include name="./dependencies/softWrench.sw4.nant.dll" />
    </references>
    <imports>
      <import namespace="softWrench.sw4.nant.classes" />
    </imports>
    <code>
      <![CDATA[
        [TaskName("changelog")]        
        public class ScriptChangeLogTask : ChangeLogTask {}

        [TaskName("logtimestart")]
        public class ScriptLogTimeStartTask : LogTimeStartTask {}

        [TaskName("logtimeend")]
        public class ScriptLogTimeEndTask : LogTimeEndTask {}
      ]]>
    </code>
  </script>
</project>
